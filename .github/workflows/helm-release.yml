name: Helm Chart Release

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.0

      - name: Install yamllint
        run: |
          sudo apt-get update
          sudo apt-get install -y yamllint

      - name: Cache Helm dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/helm
            ~/.config/helm
          key: ${{ runner.os }}-helm-${{ hashFiles('**/Chart.yaml', '**/Chart.lock') }}
          restore-keys: |
            ${{ runner.os }}-helm-

      - name: Copy minimal values for linting
        run: |
          cp values.minimal.yaml.template values.yaml

      - name: Validate Chart.yaml
        run: |
          if [ ! -f Chart.yaml ]; then
            echo "Error: Chart.yaml not found in root directory"
            exit 1
          fi
          if ! grep -q "^version:" Chart.yaml; then
            echo "Error: version field not found in Chart.yaml"
            exit 1
          fi
          if ! grep -q "^name:" Chart.yaml; then
            echo "Error: name field not found in Chart.yaml"
            exit 1
          fi

      - name: Lint Helm Chart
        run: |
          helm lint .

      - name: Run yamllint on rendered templates
        run: |
          helm template . | yamllint -c .yamllint -

      - name: Validate template rendering
        run: |
          helm template . > /dev/null || {
            echo "Error: Failed to render Helm templates"
            exit 1
          }

      - name: Package Helm Chart
        run: |
          helm package .

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            *.tgz
          draft: false
          prerelease: false
          generate_release_notes: true
          fail_on_unmatched_files: true 