{{- if .Values.dbMigration.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "trigger-dev.fullname" . }}-migrations
  namespace: {{ .Values.namespace | default .Release.Namespace }}
  labels:
    {{- include "trigger-dev.labels" . | nindent 4 }}
    app.kubernetes.io/component: db-migrate
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    {{- if not .Values.dbMigration.ttlSecondsAfterFinished }}
    "helm.sh/resource-policy": keep
    {{- end }}
spec:
  backoffLimit: {{ .Values.dbMigration.backoffLimit }}
  {{- if .Values.dbMigration.ttlSecondsAfterFinished }}
  ttlSecondsAfterFinished: {{ .Values.dbMigration.ttlSecondsAfterFinished }}
  {{- end }}
  activeDeadlineSeconds: {{ .Values.dbMigration.timeout }}
  template:
    metadata:
      {{- with .Values.dbMigration.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "trigger-dev.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: db-migrate
        {{- with .Values.dbMigration.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "trigger-dev.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: wait-for-database
          image: postgres:14-alpine
          command:
            - sh
            - -c
            - |
              echo "Waiting for database connection..."
              {{- if .Values.database.connectionStringSecret }}
              DATABASE_URL=$(cat /mnt/db-secret/DATABASE_URL)
              DB_HOST=$(echo $DATABASE_URL | sed -e "s/^.*@\([^:]*\):.*/\1/")
              DB_PORT=$(echo $DATABASE_URL | sed -e "s/^.*:\([0-9]*\)\/.*/\1/")
              {{- else }}
              DB_HOST={{ .Values.database.externalHost }}
              DB_PORT={{ .Values.database.externalPort }}
              {{- end }}
              until pg_isready -h $DB_HOST -p $DB_PORT -U postgres; do
                echo "Database is unavailable - sleeping for 2 seconds"
                sleep 2
              done
              echo "Database is available, proceeding with migration"
          resources:
            requests:
              cpu: 50m
              memory: 64Mi
          {{- if .Values.database.connectionStringSecret }}
          volumeMounts:
            - name: db-secret
              mountPath: /mnt/db-secret
              readOnly: true
          {{- end }}
      {{- if .Values.dbMigration.initContainers }}
        {{- toYaml .Values.dbMigration.initContainers | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}-db-migrate
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default (printf "v%s" .Chart.Version) }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - sh
            - -c
            - |
              echo "Running database migrations..."
              npx prisma migrate deploy
              if [ $? -eq 0 ]; then
                echo "✅ Database migrations completed successfully"
                exit 0
              else
                echo "❌ Database migrations failed"
                echo "Check your database connection settings and permissions"
                exit 1
              fi
          env:
            - name: NODE_ENV
              value: {{ .Values.dbMigration.nodeEnv | quote }}
            {{- if .Values.database.connectionStringSecret }}
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.connectionStringSecret }}
                  key: DATABASE_URL
            - name: DIRECT_URL
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.connectionStringSecret }}
                  key: DIRECT_URL
            {{- else }}
            - name: DATABASE_URL
              value: {{ include "trigger-dev.databaseUrl" . | quote }}
            - name: DIRECT_URL
              value: {{ include "trigger-dev.databaseDirectUrl" . | quote }}
            {{- end }}
            {{- with .Values.env }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
            {{- with .Values.dbMigration.env }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          resources:
            {{- toYaml .Values.resources.dbMigration | nindent 12 }}
      {{- with .Values.dbMigration.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.dbMigration.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.dbMigration.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.database.connectionStringSecret }}
      volumes:
        - name: db-secret
          secret:
            secretName: {{ .Values.database.connectionStringSecret }}
      {{- end }}
      restartPolicy: Never
{{- end }}
