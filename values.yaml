# Default values for trigger-dev.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# =============================================================================
# Global Settings
# These settings apply to all components unless overridden
# =============================================================================

# Namespace configuration
namespace: "trigger-dev"
createNamespace: true  # Set to true to automatically create namespace

# Quick start mode configuration
quickstart:
  enabled: true  # Set to false for production deployments
  # WARNING: In production, disable quickstart and manage your own secrets

# =============================================================================
# Image Settings
# Configuration for container images used by all components
# =============================================================================

image:
  repository: ghcr.io/triggerdotdev/trigger.dev
  tag: "3.3.18"  # Should match appVersion
  pullPolicy: IfNotPresent
  # For production, use image digest for immutability
  digest: ""

supervisorImage:
  repository: ghcr.io/triggerdotdev/supervisor
  tag: "3.3.18"
  pullPolicy: IfNotPresent
  digest: ""

coordinatorImage:
  repository: ghcr.io/triggerdotdev/coordinator
  tag: "3.3.18"
  pullPolicy: IfNotPresent
  digest: ""

kubernetesProviderImage:
  repository: ghcr.io/triggerdotdev/provider/kubernetes
  tag: "3.3.18"
  pullPolicy: IfNotPresent
  digest: ""

# Registry access configuration
imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# =============================================================================
# Security Settings
# Global security configurations for all pods
# =============================================================================

# Pod Security Context
podSecurityContext:
  fsGroup: 1000
  runAsUser: 1000
  runAsNonRoot: true
  # Production recommended settings:
  # seccompProfile:
  #   type: RuntimeDefault

# Container Security Context
securityContext:
  allowPrivilegeEscalation: false
  runAsNonRoot: true
  runAsUser: 1000
  capabilities:
    drop:
      - ALL
  # Production recommended:
  # readOnlyRootFilesystem: true

# =============================================================================
# Resource Management
# Default resource settings for all components
# =============================================================================

resources:
  app:
    requests:
      cpu: 100m
      memory: 256Mi
    # Production recommended:
    # limits:
    #   cpu: 500m
    #   memory: 512Mi
  worker:
    requests:
      cpu: 100m
      memory: 256Mi
  supervisor:
    requests:
      cpu: 100m
      memory: 256Mi
  dbMigration:
    requests:
      cpu: 50m
      memory: 128Mi

# =============================================================================
# Component Configuration
# Settings specific to each component
# =============================================================================

# App component configuration
app:
  enabled: true
  replicas: 1  # Set higher for production
  nodeEnv: "production"
  
  # Service configuration
  service:
    enabled: true
    type: ClusterIP
    port: 3000
    annotations: {}
  
  # Pod configuration
  podLabels: {}
  podAnnotations: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  
  # Health check configuration
  startupProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 20
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 6
  
  livenessProbe:
    httpGet:
      path: /health
      port: http
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 3
  
  readinessProbe:
    httpGet:
      path: /health
      port: http
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 3

  # Additional environment variables for app deployment
  env: {}
  # Support for init containers
  initContainers: []

# Worker component configuration
worker:
  enabled: true
  replicas: 1
  nodeEnv: "production"
  # Image configuration
  image:
    repository: ghcr.io/triggerdotdev/trigger.dev
    tag: "3.3.18"
    pullPolicy: IfNotPresent
    digest: ""
  podLabels: {}
  podAnnotations: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  # Additional environment variables for worker deployment
  env: {}
  # Enable service for worker component
  service:
    enabled: false
    type: ClusterIP
    port: 3000
    annotations: {}
  # Support for init containers
  initContainers: []
  startupProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 20
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 6
  livenessProbe:
    httpGet:
      path: /health
      port: http
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 3
  readinessProbe:
    httpGet:
      path: /health
      port: http
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 3

# Supervisor component configuration
supervisor:
  enabled: true
  replicas: 1
  # Modes available: coordinator, provider, or both
  mode: coordinator
  podLabels: {}
  podAnnotations: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  # Additional environment variables for supervisor deployment
  env: {}
  # Node environment setting
  nodeEnv: "production"
  # Workload API settings
  workloadApi:
    dequeueIntervalMs: 1000
  # Support for init containers
  initContainers: []
  startupProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 20
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 6
  livenessProbe:
    httpGet:
      path: /health
      port: http
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 3
  readinessProbe:
    httpGet:
      path: /health
      port: http
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 3
  service:
    type: ClusterIP
    port: 8020
    annotations: {}

# =============================================================================
# External Dependencies
# Configuration for required external services
# =============================================================================

# Database Configuration
database:
  # Connection details
  externalHost: your-neon-db-host.neon.tech
  externalPort: 5432
  externalDatabase: postgres
  externalUser: postgres
  externalPassword: postgres  # Use secrets in production
  
  # Connection options
  sslMode: require
  poolMin: 0
  poolMax: 10
  connectionTimeout: 60
  statementTimeout: 30000
  idleTimeout: 10000
  usePgBouncer: false
  
  # Production recommended:
  # connectionStringSecret: "trigger-db-secret"

# Redis Configuration
redis:
  url: redis://username:password@host:port
  tls: false
  connectTimeout: 5000
  # Production recommended:
  # secretName: "trigger-redis-secret"

# =============================================================================
# Production Features
# Settings typically used in production environments
# =============================================================================

# Network Policies
networkPolicy:
  enabled: false  # Enable in production

# Autoscaling
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80
  # For production, enable and configure based on expected load

# Pod Disruption Budget
podDisruptionBudget:
  enabled: false
  # For production with multiple replicas, enable and set minAvailable or maxUnavailable
  # minAvailable: 1
  # maxUnavailable: 1

# Priority Class
# Set this to ensure pods get appropriate scheduling priority
priorityClassName: ""
# For production: Create a priority class and reference it here

# Topology Spread Constraints
# Helps distribute pods across failure domains (nodes, zones)
topologySpreadConstraints: []
# For production:
# - maxSkew: 1
#   topologyKey: topology.kubernetes.io/zone
#   whenUnsatisfiable: DoNotSchedule
#   labelSelector:
#     matchLabels:
#       app.kubernetes.io/name: trigger-dev

# Secret rotation
secretRotation:
  enabled: false
  # For production environments, consider implementing a proper secret rotation mechanism
  # This section serves as a reminder and placeholder for implementation
  documentation: "For production environments, use external secret management solutions like Vault or Kubernetes External Secrets"

# =============================================================================
# Ingress Configuration
# =============================================================================

ingress:
  enabled: false
  className: ""
  annotations: {}
  # Examples of useful annotations:
  #  kubernetes.io/ingress.class: nginx
  #  kubernetes.io/tls-acme: "true"
  #  cert-manager.io/cluster-issuer: "letsencrypt-prod"
  #  external-dns.alpha.kubernetes.io/hostname: trigger.example.com
  #  nginx.ingress.kubernetes.io/ssl-redirect: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  # Example TLS configuration
  # - secretName: trigger-tls
  #   hosts:
  #     - trigger.example.com

# =============================================================================
# RBAC Configuration
# =============================================================================

rbac:
  create: true
  # Rules with minimal permissions required for the Kubernetes provider
  rules:
    - apiGroups: [""]
      resources: ["pods", "pods/log", "pods/exec", "configmaps", "secrets", "events"]
      verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
    - apiGroups: ["batch"]
      resources: ["jobs"]
      verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

# =============================================================================
# Service Account Configuration
# =============================================================================

serviceAccount:
  create: true
  name: ""
  annotations: {}

# =============================================================================
# Database Migration Configuration
# =============================================================================

dbMigration:
  enabled: true
  # Maximum retries for the migration job
  backoffLimit: 3
  # Timeout in seconds for the migration job
  timeout: 600
  # Delete the job after completion
  ttlSecondsAfterFinished: 3600
  # Node environment for migration
  nodeEnv: "production"
  # Labels for migration pod
  podLabels: {}
  # Annotations for migration pod
  podAnnotations: {}
  # Additional environment variables for migration job
  env: {}
  # Node selector for the migration job
  nodeSelector: {}
  # Tolerations for the migration job
  tolerations: []
  # Affinity for the migration job
  affinity: {}
  # Init containers for the migration job
  initContainers: [] 