# Production configuration template
# Copy this file to values.yaml and customize as needed

# Image Settings
image:
  repository: ghcr.io/triggerdotdev/trigger.dev
  tag: "v{{ .Chart.Version }}"  # Uses chart version
  pullPolicy: IfNotPresent
  digest: ""  # For production, use image digest for immutability

# Security Settings
podSecurityContext:
  fsGroup: 1000
  runAsUser: 1000
  runAsNonRoot: true

securityContext:
  allowPrivilegeEscalation: false
  runAsNonRoot: true
  runAsUser: 1000
  capabilities:
    drop:
      - ALL

# Resource Management
resources:
  app:
    requests:
      cpu: 500m
      memory: 512Mi
    limits:
      cpu: 1000m
      memory: 1Gi
  worker:
    requests:
      cpu: 500m
      memory: 512Mi
    limits:
      cpu: 1000m
      memory: 1Gi

# Database Configuration
database:
  # Option 1: Use connection string secret
  connectionStringSecret: "trigger-db-secret"
  
  # Option 2: Direct connection details
  externalHost: "your-db-host"
  externalPort: 5432
  externalDatabase: "postgres"
  externalUser: "postgres"
  externalPassword: "your-password"
  
  # Connection options
  sslMode: "require"
  poolMin: 5
  poolMax: 20
  connectionTimeout: 60
  statementTimeout: 30000
  idleTimeout: 10000
  usePgBouncer: true

# Redis Configuration
redis:
  # Option 1: Direct URL
  url: "redis://your-redis-host:6379"
  
  # Option 2: Use secret
  secretName: "trigger-redis-secret"
  
  # Connection options
  tls: true
  connectTimeout: 5000

# Component Configuration
app:
  enabled: true
  replicas: 3
  nodeEnv: "production"
  service:
    enabled: true
    type: ClusterIP
    port: 3000
  env: {}
  podLabels: {}
  podAnnotations: {}

worker:
  enabled: true
  replicas: 3
  nodeEnv: "production"
  service:
    enabled: false
    type: ClusterIP
    port: 3000
  env: {}
  podLabels: {}
  podAnnotations: {}

supervisor:
  enabled: true
  replicas: 3
  mode: "coordinator"
  nodeEnv: "production"
  service:
    type: ClusterIP
    port: 8020
  env: {}
  podLabels: {}
  podAnnotations: {}

# Production Features
networkPolicy:
  enabled: true

autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80

podDisruptionBudget:
  enabled: true
  minAvailable: 2

priorityClassName: "system-cluster-critical"

topologySpreadConstraints:
  - maxSkew: 1
    topologyKey: topology.kubernetes.io/zone
    whenUnsatisfiable: ScheduleAnyway
    labelSelector:
      matchLabels:
        app.kubernetes.io/name: {{ .Chart.Name }}

# Ingress Configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
  hosts:
    - host: trigger.your-domain.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: trigger-tls
      hosts:
        - trigger.your-domain.com

# RBAC Configuration
rbac:
  create: true
  rules:
    - apiGroups: [""]
      resources: ["pods", "pods/log", "pods/exec", "configmaps", "secrets", "events"]
      verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
    - apiGroups: ["batch"]
      resources: ["jobs"]
      verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

# Service Account Configuration
serviceAccount:
  create: true
  name: ""
  annotations: {}

# Database Migration Configuration
dbMigration:
  enabled: true
  backoffLimit: 3
  timeout: 600
  ttlSecondsAfterFinished: 3600
  nodeEnv: "production"
  podLabels: {}
  podAnnotations: {}
  env: {} 
